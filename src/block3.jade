include mixins/deliverables
include partials/layout


+layout("Block 3")
  header
    h1 Software Engineering &mdash; Lab 3



  .preamble
    p It's time to get in to design patterns. During this lab we'll practice UML, explore design patterns, and eventually refactor the chat system we built during the first block. Using our design pattern skills.

    p Try to work in pairs and take turns writing code!

    p In this lab you must also complete <b>at least one of the optional</b> exercises.



  h2 Deliverables
  p Please follow the below folder/file structure for the handin of this block.

  +toc-exercises(3)

    +toc-exercise(1)
      +toc-assignment
        +file-img("use-case-diagram.[png|jpg|gif|pdf]")

    +toc-exercise(2)
      +toc-assignment
        +file-img("class-diagram.[png|jpg|gif|pdf]")

    +toc-exercise(3)
      +toc-assignment
        +vs-solution("ObserverPattern")

    +toc-exercise(4)
      +toc-assignment
        +vs-solution("CommandPattern")

    +toc-exercise(5)
      +toc-assignment
        +vs-solution("VisitorPattern")

    +toc-exercise(6)
      +toc-assignment
        +file-img("reverse-engineered.[png|jpg|gif|pdf]")

    +toc-exercise(7)
      +toc-assignment
        +file-img("re-engineered.[png|jpg|gif|pdf]")




  +exercise(3, 1, "UML use case diagrams")
    p Consider the below requirements for a library system. Identify the actors and construct a UML use case diagram.
    ul
      li The library lends books and magazines to borrowers who registered in the system (as are the books and magazines).
      li The library handles the purchase of new titles. Old books and magazines are removed when they are out of date or in poor condition.
      li The librarian is an employee of the library who interacts with the customs (borrowers) and whose work is supported by the system.
      li A borrower can reserve a book or magazine that is not currently available, so that when it is returned they're notified.
      li The reservation is canceled when the borrower checks and the book or magazine, or through an explicit cancelling procedure.
      li The librarian can create, update, and delete information about titles, borrowers, loans, and reservation in the system.







  +exercise(3, 2, "UML class diagrams")
    p Create a UML class diagram from the below description. Begin with a noun and verb analysis.
    p A customer wants to make an order from a retail catalog. The customer can make the payment in one of these three kinds: cash, cheque, or credit card. The order contains order details, each with its associated item. Each order carries the date in which it has been posted and its status (pending, delivered, etc).








  +exercise(3, 3, "Observer Pattern")
    p Implement the <em>Observer pattern</em> as discussed in the lectures and the course book. In the context of the  Weather Station Project. You will have to change the code from Java to C#. Add the Heat Index display element as described on page 61 of the course book.





  +exercise(3, 4, "Command Pattern")
    p The fragment below is the core of a calculator, implemented using the <em>Command Pattern</em>. Develop the rest of the code and demonstrate it running on a variety of sample input.

    pre.language-csharp
      code
        | class CalculatorCommand : ICommand
        | {
        |   public char Operator{ get; private set; }
        |   public int Operand{ get; private set; }
        | 
        |   private Calculator _calculator;
        | 
        |   public CalculatorCommand(Calculator calculator,
        |     char @operator, int operand)
        |   {
        |     _calculator = calculator;
        |     Operator = @operator;
        |     Operand = operand;
        |   }
        | 
        |   public void Execute()
        |   {
        |     _calculator.Operation(Operator, Operand);
        |   }
        | 
        |   public void UnExecute()
        |   {
        |     _calculator.Operation(undo(Operator), Operand);
        |   }
        | 
        |   private char undo(char @operator)
        |   {
        |     switch (@operator)
        |     {
        |       case '+': return '-';
        |       case '-': return '+';
        |       case '*': return '/';
        |       case '/': return '*';
        |       default: throw new
        |        ArgumentException("@operator");
        |     }
        |   }
        | }







  +exercise(3, 5, "Visitor Pattern")
    p Consider the polymorphism example given in the lectures, where Employees are either Secretaries or Managers. Use the <em>Visitor pattern</em> to calculate the salary of employees.








  +exercise(3, 6, "Reverse engineering with UML")
    p Reverse engineer the graphical encryption/decryption system that you built in block one, using the UML class diagram notation. In other words, your task is to create a model of your implementation in UML.







  +exercise(3, 7, "Applying design patterns to existing code")
  p When building the chat system in block 1, little attention was paid to design principles and patterns of software design. In this assignment you are expected to systematically analyze your chat system and make changes to the design.

  p 
    b Task 1
    |  &mdash; Refactor your chat system so that it uses <em>at least three patterns</em>. Keep a changelog.

  p Below are some suggestions for patterns and principles...

  ul
    li
      b  Larman’s creator pattern
      |  &mdash; Are objects created in the right place?

    li
      b  Larman’s expert pattern
      |  &mdash; Is the responsibility to do things assigned to the correct classes?

    li
      b  Dependency Inversion principle
      |  &mdash; Are there dependencies between concrete system parts that may cause problems to maintain and extend the code? Could these dependencies be removed, e.g. through strategically design interfaces?

    li
      b  Observer pattern
      |  &mdash; How is different parts of the system being notified of change in state? Could an event-driven solution be beneficial?

    li
      b  Decorator pattern
      |  &mdash; Does any class need a change in its responsibility during runtime?

    li
      b  Factory pattern
      |  &mdash; Is the system suffering from high coupling and dependencies or repetitive complex instantiation of objects?

    li
      b  Singleton pattern
      |  &mdash; Do your system need to keep track of objects from a specific type? Should the solution be simplified with just having a single object of that type?

    li
      b  Command pattern
      |  &mdash; Could some part of the system benefit from encapsulate method invocation?

    li
      b  Model View Controller pattern
      |  &mdash; Is managing the entire system overwhelming, could MVC keep it manageable.

    li
      b  The single responsibility principle
      |  &mdash; Does every single class in the solution have a single responsibility?

    li
      b  Open-closed principle
      |  &mdash; Is the code possible to change without making changes to the existing code?

    li
      b  Interface segregation principle
      |  &mdash; Are there interfaces in the code that could be logically separated into several smaller interfaces?

    li etc...

  p Remember to keep a copy of your original chat system!

  p Rmember to keep a written log of the changes you make and the reason for them. An example of an entry in this log could be:

  blockquote 
    em May 1, 2013: Changed X. Because of Y. In accordance with pattern Z.








  +exercise(3, 8, "One more pattern")
    p Implement one of the following patterns, as implemented in the course book:

    ul
      li 
        code Decorator pattern
      li 
        code Factory pattern
      li 
        code Singleton pattern
      li 
        code Adapter or Facade pattern
      li 
        code Template method pattern
      li 
        code Composite pattern
      li 
        code State pattern
      li 
        code Proxy pattern



