include ../../_mixins



+layout("Block 3")
  header
    h1 Software Engineering &mdash; Lab 3



  .preamble
    p In this block we'll finally get into exploring Design Patterns. This, by implement patterns from the book and from the lectures as well as through using UML as notation for discussing design.


  h2 Seminar hand in
  p
    a(href="https://github.com/uu-im/horrible-chat-system") This chat system 
    | seemingly fulfills its technical requirements. However, it is difficult to tell since it has no tests at all, and is absolutely horrifically designed. Refactor the chat system by applying design patterns and principles as you see fit. If you find it difficult to identify potential refactorings, run the system and imagine what potential change requests might show up in the future.


  h2 Exercises


  +exercise(3, 1, "UML use case diagrams")
    p Consider the below requirements for a library system. Identify the actors and construct a UML use case diagram.
    ul
      li The library lends books and magazines to borrowers who registered in the system (as are the books and magazines).
      li The library handles the purchase of new titles. Old books and magazines are removed when they are out of date or in poor condition.
      li The librarian is an employee of the library who interacts with the customs (borrowers) and whose work is supported by the system.
      li A borrower can reserve a book or magazine that is not currently available, so that when it is returned they're notified.
      li The reservation is canceled when the borrower checks and the book or magazine, or through an explicit cancelling procedure.
      li The librarian can create, update, and delete information about titles, borrowers, loans, and reservation in the system.


  +exercise(3, 2, "UML class diagrams")
    p Create a UML class diagram from the below description. Begin with a noun and verb analysis.
    p A customer wants to make an order from a retail catalog. The customer can make the payment in one of these three kinds: cash, cheque, or credit card. The order contains order details, each with its associated item. Each order carries the date in which it has been posted and its status (pending, delivered, etc).


  +exercise(3, 3, "Observer Pattern")
    p Implement the <em>Observer pattern</em> as discussed in the lectures and the course book. In the context of the  Weather Station Project. You will have to change the code from Java to C#. Add the Heat Index display element as described on page 61 of the course book.


  +exercise(3, 4, "Visitor Pattern")
    p Consider the polymorphism example given in the lectures, where Employees are either Secretaries or Managers. Use the <em>Visitor pattern</em> to calculate the salary of employees.


  +exercise(3, 5, "Command Pattern")
    p Use the command pattern example from the course book as inspiration, and implement the pattern for a different, but suitable, domain.


  +exercise(3, 6, "Reverse engineering with UML")
    p Reverse engineer the graphical encryption/decryption system that you built in block one, using the UML class diagram notation. In other words, your task is to create a model of your implementation in UML.


  +exercise(3, 7, "Applying design patterns to existing code")
    p When building the graphical encryption/decryption system in block 1, little attention was paid to design principles and patterns of software design. Analyze your encryption/decryption system (perhaps using UML) and make changes to the design.
